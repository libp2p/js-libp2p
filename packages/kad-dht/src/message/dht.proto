syntax = "proto3";
// can't use, because protocol-buffers doesn't support imports
// so we have to duplicate for now :(
// import "record.proto";

message Record {
  // adjusted for JavaScript
  optional bytes key = 1;
  optional bytes value = 2;
  optional bytes author = 3;
  optional bytes signature = 4;
  optional string timeReceived = 5;
}

enum MessageType {
  PUT_VALUE = 0;
  GET_VALUE = 1;
  ADD_PROVIDER = 2;
  GET_PROVIDERS = 3;
  FIND_NODE = 4;
  PING = 5;
}

enum ConnectionType {
  // sender does not have a connection to peer, and no extra information (default)
  NOT_CONNECTED = 0;

  // sender has a live connection to peer
  CONNECTED = 1;

  // sender recently connected to peer
  CAN_CONNECT = 2;

  // sender recently tried to connect to peer repeatedly but failed to connect
  // ("try" here is loose, but this should signal "made strong effort, failed")
  CANNOT_CONNECT = 3;
}

message PeerInfo {
  // ID of a given peer.
  bytes id = 1;

  // multiaddrs for a given peer
  repeated bytes multiaddrs = 2;

  // used to signal the sender's connection capabilities to the peer
  optional ConnectionType connection = 3;
}

message Message {
  // defines what type of message it is.
  MessageType type = 1;

  // defines what coral cluster level this query/response belongs to.
  // in case we want to implement coral's cluster rings in the future.
  optional int32 clusterLevel = 10;

  // Used to specify the key associated with this message.
  // PUT_VALUE, GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
  // adjusted for JavaScript
  optional bytes key = 2;

  // Used to return a value
  // PUT_VALUE, GET_VALUE
  // adjusted Record to bytes for js
  optional bytes record = 3;

  // Used to return peers closer to a key in a query
  // GET_VALUE, GET_PROVIDERS, FIND_NODE
  repeated PeerInfo closer = 8;

  // Used to return Providers
  // GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
  repeated PeerInfo providers = 9;
}
